name: Process Aviation Charts

on:
  workflow_dispatch:
    inputs:
      chart_type:
        description: 'Chart processing type'
        required: true
        type: choice
        options:
          - 'single_sectional'
          - 'all_sectionals'
          - 'all_ifr_low'
          - 'all_ifr_high'
          - 'full_vfr'
          - 'full_ifr'
          - 'complete'
        default: 'single_sectional'
  
  schedule:
    - cron: '0 2 */28 * *'

jobs:
  process-charts:
    runs-on: ubuntu-latest
    
    steps:
      - name: Maximize build space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo docker image prune -af
          df -h
      
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Pull official chartmaker image
        run: |
          echo "Pulling official chartmaker image..."
          docker pull n129bz/chartmaker:latest
          docker images | grep chartmaker
      
      - name: Install B2 CLI
        run: |
          wget https://github.com/Backblaze/B2_Command_Line_Tool/releases/latest/download/b2-linux
          chmod +x b2-linux
          sudo mv b2-linux /usr/local/bin/b2
          b2 version
      
      - name: Configure B2 credentials
        run: |
          b2 account authorize ${{ secrets.B2_KEY_ID }} ${{ secrets.B2_APPLICATION_KEY }}
      
      - name: Determine chart command
        id: chart_command
        run: |
          CHART_TYPE="${{ github.event.inputs.chart_type }}"
          
          if [ -z "$CHART_TYPE" ]; then
            CHART_TYPE="single_sectional"
          fi
          
          case "$CHART_TYPE" in
            "single_sectional")
              COMMAND="area-single=12"
              echo "Processing single sectional: Dallas-Ft Worth (index 12)"
              ;;
            "all_sectionals")
              COMMAND="area=vfr"
              echo "Processing all VFR sectional charts"
              ;;
            "all_ifr_low")
              COMMAND="area=ifr-low"
              echo "Processing all IFR Low Enroute charts"
              ;;
            "all_ifr_high")
              COMMAND="area=ifr-high"
              echo "Processing all IFR High Enroute charts"
              ;;
            "full_vfr")
              COMMAND="all-vfr"
              echo "Processing all VFR charts"
              ;;
            "full_ifr")
              COMMAND="all-ifr"
              echo "Processing all IFR charts"
              ;;
            "complete")
              COMMAND=""
              echo "Processing ALL charts"
              ;;
            *)
              echo "Unknown chart type: $CHART_TYPE"
              exit 1
              ;;
          esac
          
          echo "command=$COMMAND" >> $GITHUB_OUTPUT
          echo "Chart command: '$COMMAND'"
      
      - name: Process charts
        run: |
          COMMAND="${{ steps.chart_command.outputs.command }}"
          
          echo "============================================"
          echo "Starting chart processing"
          echo "Command: '$COMMAND'"
          echo "Using official n129bz/chartmaker:latest image"
          echo "Processor count: $(nproc)"
          echo "============================================"
          
          mkdir -p public/charts workarea chartcache
          
          # Use official n129bz/chartmaker image
          # Note: Official image uses 'node make' not 'node make.js'
          if [ -z "$COMMAND" ]; then
            echo "No command specified, processing all charts"
            docker run --rm \
              -v $(pwd)/public:/chartmaker/public \
              -v $(pwd)/workarea:/chartmaker/workarea \
              -v $(pwd)/chartcache:/chartmaker/chartcache \
              n129bz/chartmaker:latest \
              node make
          else
            echo "Processing with command: $COMMAND"
            docker run --rm \
              -v $(pwd)/public:/chartmaker/public \
              -v $(pwd)/workarea:/chartmaker/workarea \
              -v $(pwd)/chartcache:/chartmaker/chartcache \
              n129bz/chartmaker:latest \
              node make $COMMAND
          fi
          
          echo "============================================"
          echo "Chart processing completed"
          echo "Output directory contents:"
          ls -lh public/charts/ || echo "No charts directory found"
          echo "============================================"
      
      - name: Get chart date
        id: chart_date
        run: |
          # Find the most recent chart directory
          if [ ! -d "public/charts" ]; then
            echo "ERROR: public/charts directory doesn't exist"
            exit 1
          fi
          
          CHART_DATE=$(ls -t public/charts/ 2>/dev/null | head -n 1)
          
          if [ -z "$CHART_DATE" ]; then
            echo "ERROR: No chart directory found in public/charts/"
            echo "Directory contents:"
            ls -la public/charts/ || echo "Directory is empty"
            exit 1
          fi
          
          echo "chart_date=$CHART_DATE" >> $GITHUB_OUTPUT
          echo "Charts processed for date: $CHART_DATE"
      
      - name: Validate charts
        run: |
          CHART_DATE="${{ steps.chart_date.outputs.chart_date }}"
          
          echo "Validating charts in: public/charts/$CHART_DATE"
          
          if [ ! -d "public/charts/$CHART_DATE" ]; then
            echo "ERROR: Chart directory not found: public/charts/$CHART_DATE"
            exit 1
          fi
          
          # Count files
          FILE_COUNT=$(find public/charts/$CHART_DATE -type f 2>/dev/null | wc -l)
          echo "Found $FILE_COUNT files"
          
          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "ERROR: No files generated in public/charts/$CHART_DATE"
            echo "Directory structure:"
            ls -laR public/charts/
            exit 1
          fi
          
          # Get total size
          TOTAL_SIZE=$(du -sh public/charts/$CHART_DATE | cut -f1)
          
          echo "============================================"
          echo "‚úÖ Validation passed!"
          echo "   Chart date: $CHART_DATE"
          echo "   Files: $FILE_COUNT"
          echo "   Total size: $TOTAL_SIZE"
          echo "============================================"
      
      - name: Upload to Backblaze
        env:
          B2_BUCKET: ${{ secrets.B2_BUCKET }}
        run: |
          CHART_DATE="${{ steps.chart_date.outputs.chart_date }}"
          
          echo "============================================"
          echo "Uploading to Backblaze B2"
          echo "Source: public/charts/$CHART_DATE"
          echo "Destination: b2://$B2_BUCKET/$CHART_DATE"
          echo "============================================"
          
          # Sync to B2
          b2 sync --no-progress --threads 8 \
            public/charts/$CHART_DATE \
            b2://$B2_BUCKET/$CHART_DATE
          
          echo "‚úÖ Upload completed successfully"
      
      - name: Purge Cloudflare cache
        if: success()
        env:
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
        run: |
          if [ -n "$CLOUDFLARE_API_KEY" ] && [ -n "$CLOUDFLARE_ZONE_ID" ]; then
            echo "Purging Cloudflare cache..."
            
            RESPONSE=$(curl https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache \
          -H 'Content-Type: application/json' \
          -H "X-Auth-Email: ${{ secrets.CLOUDFLARE_API_EMAIL }}" \
          -H "X-Auth-Key: ${{ secrets.CLOUDFLARE_API_KEY }}" \
          -d '{"purge_everything":true}' \
          -w "\nHTTP Status: %{http_code}\n")
            
            echo "Response: $RESPONSE"
            
            if echo "$RESPONSE" | grep -q '"success":true'; then
              echo "‚úÖ Cloudflare cache purged successfully"
            else
              echo "‚ö†Ô∏è Cloudflare cache purge may have failed"
            fi
          else
            echo "‚ö†Ô∏è Cloudflare credentials not configured, skipping cache purge"
          fi
      
      - name: Summary
        if: success()
        run: |
          CHART_DATE="${{ steps.chart_date.outputs.chart_date }}"
          
          echo "============================================"
          echo "üéâ Chart Processing Complete!"
          echo "============================================"
          echo "Chart date: $CHART_DATE"
          echo "B2 bucket: ${{ secrets.B2_BUCKET }}"
          echo "Cloudflare URL: https://charts.leonis85.com/$CHART_DATE/"
          echo ""
          echo "Test a tile:"
          echo "https://charts.leonis85.com/$CHART_DATE/9/121/194.png"
          echo "============================================"
      
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up work directories..."
          sudo rm -rf workarea/* chartcache/* || true
          docker system prune -af
          echo "‚úÖ Cleanup completed"
          df -h