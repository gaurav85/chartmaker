name: Build FAA charts and upload to B2

on:
  workflow_dispatch:
    inputs:
      chart_args:
        description: 'Chartmaker args (e.g., area-single=12, full-single=0, area-all)'
        required: true
        default: 'area-single=12'
      chart_type:
        description: 'Friendly chart type label for the report (e.g., sectional, full)'
        required: true
        default: 'sectional'

defaults:
  run:
    shell: bash

jobs:
  process-charts:
    runs-on: ubuntu-latest

    # Use the published image; we’ll add Node+jq inside the job.
    container:
      image: n129bz/chartmaker:latest

    env:
      # Prevent chartmaker from starting the web server
      WEBSERVERMODE: "false"

      # B2 bucket (so we can refer to it in multiple steps)
      B2_BUCKET_NAME: ${{ secrets.B2_BUCKET_NAME }}

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Install Node & jq inside container
        run: |
          set -euxo pipefail
          if command -v node >/dev/null 2>&1; then node -v; else
            if command -v apt-get >/dev/null 2>&1; then
              apt-get update
              apt-get install -y curl ca-certificates gnupg jq
              mkdir -p /etc/apt/keyrings
              curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key \
                | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
              echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_18.x nodistro main" \
                > /etc/apt/sources.list.d/nodesource.list
              apt-get update
              apt-get install -y nodejs
            elif command -v apk >/dev/null 2>&1; then
              apk add --no-cache nodejs-current npm jq
            elif command -v yum >/dev/null 2>&1; then
              yum install -y jq
              curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
              yum install -y nodejs
            else
              echo "Unsupported base image: could not install Node." >&2
              exit 1
            fi
          fi
          node -v

      - name: Patch chartmaker (defensive null-guard)
        working-directory: /chartmaker
        run: |
          set -euxo pipefail
          if grep -n 'dbf.length' make.js >/dev/null 2>&1; then
            sed -i 's/(dbf.length > 0 && fs.existsSync(dbf))/(dbf && dbf.length > 0 && fs.existsSync(dbf))/' make.js
          fi

      - name: Build charts (no webserver)
        working-directory: /chartmaker
        env:
          WEBSERVERMODE: "false"
        run: |
          set -euxo pipefail
          node make "${{ github.event.inputs.chart_args }}"

      - name: Find charts output (path + date)
        id: chart_meta
        run: |
          set -euo pipefail
          ROOT=""
          if [ -d "/chartmaker/charts" ]; then
            ROOT="/chartmaker/charts"
          elif [ -d "/chartmaker/public/charts" ]; then
            ROOT="/chartmaker/public/charts"
          else
            echo "No charts directory found" >&2; exit 1
          fi
          # choose newest subdir if present; otherwise use root
          if find "$ROOT" -mindepth 1 -maxdepth 1 -type d | grep -q . ; then
            CHART_DIR="$(find "$ROOT" -mindepth 1 -maxdepth 1 -type d | sort | tail -n1)"
          else
            CHART_DIR="$ROOT"
          fi
          CHART_DATE="$(date -u +%Y-%m-%d)"
          echo "chart_dir=$CHART_DIR"   >> "$GITHUB_OUTPUT"
          echo "chart_date=$CHART_DATE" >> "$GITHUB_OUTPUT"
          echo "Using CHART_DIR=$CHART_DIR  CHART_DATE=$CHART_DATE"
          echo "Preview:"
          find "$CHART_DIR" -maxdepth 1 -type f -name '*.db' -printf '%f\n' | head -20 || true

      - name: Install B2 CLI (v4.x)
        run: |
          set -euxo pipefail
          if ! command -v pip3 >/dev/null 2>&1; then
            apt-get update
            apt-get install -y python3-pip
          fi
          pip3 install --upgrade "b2[full]"

      - name: Configure B2 credentials
        env:
          B2_KEY_ID: ${{ secrets.B2_KEY_ID }}
          B2_APP_KEY: ${{ secrets.B2_APPLICATION_KEY }}
        run: |
          set -euxo pipefail
          b2 account authorize "${B2_KEY_ID}" "${B2_APP_KEY}"

      - name: Upload to Backblaze B2 (sync + latest.txt)
        env:
          CHART_DIR:  ${{ steps.chart_meta.outputs.chart_dir }}
          CHART_DATE: ${{ steps.chart_meta.outputs.chart_date }}
          B2_BUCKET:  ${{ env.B2_BUCKET_NAME }}
        run: |
          set -euxo pipefail
          test -d "${CHART_DIR}"
          echo "Uploading ${CHART_DIR} -> b2://${B2_BUCKET}/${CHART_DATE}/"
          b2 sync --keep-days 90 --replace-newer \
            "${CHART_DIR}/" "b2://${B2_BUCKET}/${CHART_DATE}/"

          echo "${CHART_DATE}" > latest.txt
          b2 file upload --no-progress "${B2_BUCKET}" latest.txt latest.txt
          echo "Upload complete and latest.txt updated"

      - name: Purge Cloudflare cache
        env:
          CF_ZONE_ID:   ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CF_API_EMAIL: ${{ secrets.CLOUDFLARE_API_EMAIL }}
          CF_API_KEY:   ${{ secrets.CLOUDFLARE_API_KEY }}
        run: |
          set -euxo pipefail
          curl -sS "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" \
            -H 'Content-Type: application/json' \
            -H "X-Auth-Email: ${CF_API_EMAIL}" \
            -H "X-Auth-Key: ${CF_API_KEY}" \
            -d '{"purge_everything":true}' \
            -w "\nHTTP Status: %{http_code}\n"

      # -------- your extra steps --------

      - name: Create processing report
        if: always()
        env:
          CHART_DATE:  ${{ steps.chart_meta.outputs.chart_date }}
          CHART_DIR:   ${{ steps.chart_meta.outputs.chart_dir }}
          CHART_TYPE:  ${{ github.event.inputs.chart_type }}
        run: |
          set -euo pipefail
          REPORT="$GITHUB_WORKSPACE/report.md"
          {
            echo "# Chart Processing Report"
            echo
            echo "**Date:** $(date -u)  "
            echo "**Chart Date:** ${CHART_DATE}  "
            echo "**Chart Type:** ${CHART_TYPE}  "
            echo
            echo "## Processing Summary"
            echo '```'
            find "${CHART_DIR}" -maxdepth 1 -type f -name "*.db" -exec ls -lh {} \;
            echo '```'
            echo
            echo "## Disk Usage"
            echo '```'
            df -h
            echo '```'
          } > "$REPORT"
          echo "Wrote $REPORT"

      - name: Upload report as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: processing-report-${{ steps.chart_meta.outputs.chart_date }}
          path: report.md
          retention-days: 30

      - name: Cleanup
        if: always()
        run: |
          set +e
          rm -rf /chartmaker/workarea/* /chartmaker/chartcache/* 2>/dev/null || true
          echo "Cleanup completed"

  notify:
    needs: process-charts
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send notification
        run: |
          if [ "${{ needs.process-charts.result }}" = "success" ]; then
            echo "✅ Charts processed and uploaded successfully"
            echo "Access at: https://charts.leonis85.com/"
          else
            echo "❌ Chart processing failed"
            echo "Check logs at: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          fi
